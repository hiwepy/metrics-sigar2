#===============i81n 信息=========================================

#操作系统相关参数
computer.name 					= 计算机名
computer.domain					= 计算机域名
os.name							= 操作系统
os.arch							= 系统构架
os.version						= 操作系统版本号
os.cores						= 处理器个数
os.desc							= 操作系统描述
file.separator					= 文件分隔符
path.separator					= 路径分隔符
line.separator					= 行分隔符
user.home						= 用户主目录
user.name						= 用户账户名称
user.dir						= 用户当前工作目录
host.ip							= 本地IP地址
host.name						= 本地主机名

#Java环境相关参数
java.home						= Java安装路径
java.version 					= Java运行环境版本
java.vendor 					= Java运行环境供应商
java.vendor.url 				= Java供应商的URL
java.vm.specification.name 		= Java虚拟机规范名称
java.vm.specification.vendor	= Java虚拟机规范供应商
java.vm.specification.version 	= Java虚拟机规范版本
java.vm.name					= Java虚拟机实现名称
java.vm.vendor					= Java虚拟机实现供应商
java.vm.version 				= Java虚拟机实现版本
java.vm.options					= Java虚拟机参数
java.specification.name			= Java运行时环境规范名称
java.specification.vender		= Java运行时环境规范供应商
java.specification.version		= Java运行时环境规范版本
java.class.version				= Java类格式版本号
java.class.path					= Java类路径
java.library.path				= 加载库时搜索的路径列表
java.io.tmpdir					= 默认临时文件路径
java.ext.dirs					= 一个或多个扩展目录的路径

#Java虚拟机相关参数
jvm.gc.name						= 垃圾回收器名称
jvm.gc.count					= 垃圾回收总次数
jvm.gc.time 					= 总花费时间
jvm.runtime.Uptime				= JVM已运行时间
jvm.runtime.StartTime			= JVM启动时间 
jvm.compilation.name			= JIT 编译器
jvm.compilation.totalCompilationTime	= 总编译时间
#JVM运行内存信息
jvm.memory.max					= JVM 最大内存
jvm.memory.total				= JVM 总内存
jvm.memory.free					= JVM 剩余内存
jvm.memory.used					= JVM 已用内存
jvm.memory.usage				= JVM 使用率
#当前堆内存使用情况
jvm.memory.HeapMemoryUsage.init	= 初始堆大小
jvm.memory.HeapMemoryUsage.used	= 当前堆大小
jvm.memory.HeapMemoryUsage.committed = 提交的堆内存
jvm.memory.HeapMemoryUsage.max	= 最大堆大小
#当前的非堆内存的使用情况
jvm.memory.NonHeapMemoryUsage.init
jvm.memory.NonHeapMemoryUsage.used
jvm.memory.NonHeapMemoryUsage.committed
jvm.memory.NonHeapMemoryUsage.max

#Eden Space (heap)： 内存最初从这个线程池分配给大部分对象。
#Survivor Space (heap)：用于保存在eden space内存池中经过垃圾回收后没有被回收的对象。
#Tenured Generation (heap)：用于保持已经在 survivor space内存池中存在了一段时间的对象。
#Permanent Generation (non-heap): 保存虚拟机自己的静态(refective)数据，例如类（class）和方法（method）对象。Java虚拟机共享这些类数据。这个区域被分割为只读的和只写的，
#Code Cache (non-heap):HotSpot Java虚拟机包括一个用于编译和保存本地代码（native code）的内存，叫做“代码缓存区”（code cache）
        